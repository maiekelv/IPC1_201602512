/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


package listasimple;
import java.io.File;
import java.io.FileWriter;
import java.util.logging.Level;
import java.util.logging.Logger;


public class Principal extends javax.swing.JFrame {
    int pasajerosCreados;
    int maletasCreadas;
    int maletasDebug;
    ListaAviones aviones;
    Cola desabordaje;
    ListaOrdenada escritorios;
    DoblementeEnlazadaCircular equipaje;
    Lista mantenimiento;
    ListaAviones colaMantenimiento;
    int avionesRestantes;
    int numeroEscritorios;
    int numeroMantenimiento;
    int contadorTurnos;
    int idAviones;
    Hilo repintar;
    public Principal() {
        initComponents();
        
        jButtonSiguiente.setVisible(false);
        jButtonTerminar.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSiguiente = new javax.swing.JButton();
        jButtonTerminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jButtonIniciar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonSiguiente.setText("Siguiente");
        jButtonSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSiguienteActionPerformed(evt);
            }
        });

        jButtonTerminar.setText("Terminar");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.setMaximumSize(new java.awt.Dimension(35000, 35000));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1082, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 892, Short.MAX_VALUE)
        );

        jButtonIniciar.setText("Iniciar");
        jButtonIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIniciarActionPerformed(evt);
            }
        });

        jLabel1.setText("Aviones");

        jTextField1.setText("5");

        jLabel2.setText("Escritorios");

        jTextField2.setText("10");

        jLabel3.setText("Mantenimiento");

        jTextField3.setText("4");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel4.setText("Ruta a Dot.exe");

        jTextField4.setText("C:\\Program Files (x86)\\Graphviz2.38\\bin\\");
            jTextField4.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField4ActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(jButtonIniciar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButtonSiguiente))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(34, 34, 34)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButtonTerminar)
                            .addGap(228, 228, 228)
                            .addComponent(jLabel4)
                            .addGap(38, 38, 38)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                    .addGap(18, 18, 18)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(34, 34, 34))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(27, 27, 27)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonIniciar)
                        .addComponent(jButtonSiguiente)
                        .addComponent(jButtonTerminar))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(31, 31, 31)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 908, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jButtonIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIniciarActionPerformed
        // TODO add your handling code here
    this.avionesRestantes = Integer.parseInt(jTextField1.getText());
    this.numeroEscritorios = Integer.parseInt(jTextField2.getText());
    this.numeroMantenimiento = Integer.parseInt(jTextField3.getText());
    this.contadorTurnos = 0;
    this.pasajerosCreados = 1;
    this.maletasCreadas = 1;
    maletasDebug=0;
    this.aviones = new ListaAviones();
    this.desabordaje = new Cola();
    this.escritorios = new ListaOrdenada();
    this.equipaje = new DoblementeEnlazadaCircular();
    this.mantenimiento = new Lista();
    this.colaMantenimiento = new ListaAviones();
    this.idAviones = 1;
    jButtonIniciar.setVisible(false);
    jButtonSiguiente.setVisible(true);
    jButtonTerminar.setVisible(true);
    jLabel1.setVisible(false);
    jTextField1.setVisible(false);
    jLabel2.setVisible(false);
    jTextField2.setVisible(false);
    jLabel3.setVisible(false);
    jTextField3.setVisible(false);
    int contadorEscritoriosCreados = 1;
    if(numeroEscritorios>26){numeroEscritorios = 26;}
    while(contadorEscritoriosCreados<=numeroEscritorios){
    EscritorioRegistro nuevoEscritorio = new EscritorioRegistro(contadorEscritoriosCreados);
    this.escritorios.insertarAlFinal(nuevoEscritorio);
    contadorEscritoriosCreados++;
    }
    int contadorMantenimientosCreados = 1;
    while(contadorMantenimientosCreados<=numeroMantenimiento){
    Mantenimiento nuevoMantenimiento = new Mantenimiento(contadorMantenimientosCreados);
    this.mantenimiento.InsertarAlFinal(nuevoMantenimiento);
    contadorMantenimientosCreados++;
    }
    
    
    
    
    
    }//GEN-LAST:event_jButtonIniciarActionPerformed

    private void jButtonSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSiguienteActionPerformed
    
        String acciones = "";
        if(escritorios.ini!=null){
            NodoCola nodoEscVer = escritorios.ini;
            EscritorioRegistro escVer = (EscritorioRegistro)nodoEscVer.data;
            escVer.turnosRestantes--;
            escVer.turnosRestantes = ((escVer.turnosRestantes<1)? 0: escVer.turnosRestantes);
            if(escVer.turnosRestantes<1 && escVer.pasajero!=null){
                int contadorDocumentos = escVer.cantidadDocARegistrar;
                if(escVer.pasajero.identificacion!=0){
                acciones+="Escritorio "+ escVer.identificador+" registro "+contadorDocumentos+" Documentos de pasajero "+ escVer.pasajero.identificacion+"\r\n";
                }
                while(contadorDocumentos>0){
                    nodoEscVer.documentos.push(1);

                    contadorDocumentos--;

                }
                int contadorMaletas = escVer.pasajero.cantidadMaletas;
                if(escVer.pasajero.identificacion!=0){
                acciones+="Pasajero "+ escVer.pasajero.identificacion+" recogio sus "+contadorMaletas+" Maletas \r\n";
                }
                while(contadorMaletas>0){
                    try{
                        equipaje.pop();maletasDebug--;
                    }catch(Exception e){}
                    contadorMaletas--;

                }
                
                if(escVer.pasajero.identificacion!=0){
                acciones+="Pasajero "+ escVer.pasajero.identificacion+" ha salido del sistema \r\n";
                }
                escVer.Estado=2;
                escVer.pasajero=null;
                if(nodoEscVer.cola.ini!=null){
                    try{
                        Nodo nCEscVer = nodoEscVer.cola.descolar();
                        Pasajero nPEscVer = (Pasajero)nCEscVer.data;

                        escVer.cantidadDocARegistrar = nPEscVer.cantidadDocumentos;
                        escVer.pasajero = nPEscVer;
                        escVer.clienteAtendido = nPEscVer.identificacion;
                        escVer.turnosRestantes = nPEscVer.turnoRegistro;
                        escVer.Estado = 1;
                        nodoEscVer.data = (Object)escVer;
                        acciones+="Escritorio "+ escVer.identificador+" empezo a atender a pasajero "+nPEscVer.identificacion+"\r\n";

                    }catch(Exception e){
                        escVer.Estado = 2;
                        nodoEscVer.data = (Object)escVer;
                    }
                    }else{
                        escVer.Estado = 2;
                        nodoEscVer.data = (Object)escVer;
                }
            }
            
            
            
            while(nodoEscVer.siguiente!=null){
                nodoEscVer = nodoEscVer.siguiente;
                escVer = (EscritorioRegistro)nodoEscVer.data;
                escVer.turnosRestantes--;
                escVer.turnosRestantes = ((escVer.turnosRestantes<1)? 0: escVer.turnosRestantes);
                if(escVer.turnosRestantes<1&& escVer.pasajero!=null){
                    int contadorDocumentos = escVer.cantidadDocARegistrar;
                    
                if(escVer.pasajero.identificacion!=0){
                    acciones+="Escritorio "+ escVer.identificador+" registro "+contadorDocumentos+" Documentos de pasajero "+ escVer.pasajero.identificacion+"\r\n";
                }
                    while(contadorDocumentos>0){
                        nodoEscVer.documentos.push(1);

                        contadorDocumentos--;

                    }
                    int contadorMaletas = escVer.pasajero.cantidadMaletas;
                    
                if(escVer.pasajero.identificacion!=0){
                    acciones+="Pasajero "+ escVer.pasajero.identificacion+" recogio sus "+contadorMaletas+" Maletas \r\n";
                }
                    while(contadorMaletas>0){
                        try{
                            equipaje.pop();maletasDebug--;
                        }catch(Exception e){}
                        contadorMaletas--;

                    }

                if(escVer.pasajero.identificacion!=0){
                    acciones+="Pasajero "+ escVer.pasajero.identificacion+" ha salido del sistema \r\n";
                }
                    escVer.Estado=2;
                    escVer.pasajero=null;
                    if(nodoEscVer.cola.ini!=null){
                try{
                    Nodo nCEscVer = nodoEscVer.cola.descolar();
                    Pasajero nPEscVer = (Pasajero)nCEscVer.data;
                    
                    escVer.cantidadDocARegistrar = nPEscVer.cantidadDocumentos;
                    escVer.pasajero = nPEscVer;
                    escVer.clienteAtendido = nPEscVer.identificacion;
                    escVer.turnosRestantes = nPEscVer.turnoRegistro;
                    escVer.Estado = 1;
                    nodoEscVer.data = (Object)escVer;
                    acciones+="Escritorio "+ escVer.identificador+" empezo a atender a pasajero "+nPEscVer.identificacion+"\r\n";
                    
                }catch(Exception e){
                    escVer.Estado = 2;
                    nodoEscVer.data = (Object)escVer;
                }
                }else{
                    escVer.Estado = 2;
                nodoEscVer.data = (Object)escVer;
                }
                }
                
                
                    
            }
        }
        if(mantenimiento.ini!=null){
           Nodo nEstacionVer = mantenimiento.ini;
           Mantenimiento estacionVer = (Mantenimiento) nEstacionVer.data;
           estacionVer.turnosRestantes--;
           estacionVer.turnosRestantes = ((estacionVer.turnosRestantes<1)? 0: estacionVer.turnosRestantes);
           if(estacionVer.turnosRestantes<1){
               estacionVer.Estado = 2;
               if(estacionVer.avionId!=0){
                    acciones+="Avion "+estacionVer.avionId+" ha Salido del Sistema\r\n";
                    estacionVer.avionId = 0;
               }
           }
           mantenimiento.ini.data = (Object) estacionVer;
           
           while(nEstacionVer.siguiente!=null){
               nEstacionVer = nEstacionVer.siguiente;
           estacionVer = (Mantenimiento) nEstacionVer.data;
           estacionVer.turnosRestantes--;
           estacionVer.turnosRestantes = ((estacionVer.turnosRestantes<1)? 0: estacionVer.turnosRestantes);
           if(estacionVer.turnosRestantes<1){
               estacionVer.Estado = 2;
               if(estacionVer.avionId!=0){
                    acciones+="Avion "+estacionVer.avionId+" ha Salido del Sistema\r\n";
                    estacionVer.avionId = 0;
               }
           }
           nEstacionVer.data = (Object) estacionVer;
           }
        }
        if(aviones.ini!=null){
        Avion avionalFrente = (Avion) aviones.ini.data;
        avionalFrente.turnosDesabordaje--;
        if(avionalFrente.turnosDesabordaje==0){
            try{
            Nodo nodoAv = (Nodo)aviones.removerDelFrente();
            Avion av = (Avion) nodoAv.data;
            acciones+="Avion "+av.id+" ha desabordado\r\n";
                    
            }
            catch(Exception e){
                int a =5;
                    }
            
            int contadorNuevosPasajeros = avionalFrente.pasajeros;
            acciones+="Avion "+avionalFrente.id+" ha desabordado "+contadorNuevosPasajeros+" Pasajeros\r\n";
            while(contadorNuevosPasajeros>0){
                Pasajero nuevoPasajero = new Pasajero(this.pasajerosCreados);
                int contadorMaletasPasajero = nuevoPasajero.cantidadMaletas;
                
                acciones+="Pasajero "+nuevoPasajero.identificacion +" traia "+contadorMaletasPasajero+" maletas\r\n";
                while(contadorMaletasPasajero>0){
                    Equipaje nuevoEquipaje = new Equipaje(maletasCreadas);
                    equipaje.push(nuevoEquipaje);
    maletasDebug++;
                    maletasCreadas++;
                    contadorMaletasPasajero--;
                }
                this.desabordaje.encolar(nuevoPasajero);
                this.pasajerosCreados++;
                contadorNuevosPasajeros--;
            }
            
            this.colaMantenimiento.InsertarAlFinal(avionalFrente);
        }
        else{
            aviones.ini.data = (Object) avionalFrente;
        }
        
    }
    
     if(mantenimiento.ini!=null){
    Nodo nodoCM = mantenimiento.ini;
    Mantenimiento estacion = (Mantenimiento) nodoCM.data;
    if(estacion.Estado==2){
    try{
        Nodo nAvionM = (Nodo)colaMantenimiento.removerDelFrente();
        Avion avionM = (Avion)nAvionM.data ;
        estacion.Estado = 1;
        estacion.turnosRestantes = avionM.turnosMantenimiento;
        estacion.avionId = avionM.id;
        
            acciones+="Estacion "+estacion.identificador+" empezo a atender a Avion "+avionM.id+"\r\n";
        nodoCM.data = (Object)estacion;
    }catch(Exception e){
    }
    }
    while(nodoCM.siguiente!=null){
    nodoCM = nodoCM.siguiente;
    estacion = (Mantenimiento) nodoCM.data;
    if(estacion.Estado==2){
    try{
        Nodo nAvionM = (Nodo)colaMantenimiento.removerDelFrente();
        Avion avionM = (Avion) nAvionM.data;
        estacion.Estado = 1;
        estacion.avionId = avionM.id;
        estacion.turnosRestantes = avionM.turnosMantenimiento;
        
            acciones+="Estacion "+estacion.identificador+" empezo a atender a Avion "+avionM.id+"\r\n";
        nodoCM.data = (Object)estacion;
    }catch(Exception e){
    }
    }
    
    }
     }   
     if(avionesRestantes>0){
     int numero = (int)(Math.random()*2)+1;
     Avion nuevoAvion = new Avion(numero, idAviones);
     idAviones++;
     avionesRestantes--;
     aviones.InsertarAlFinal((Object) nuevoAvion);
     
     
    }
    NodoCola apuntadorBusqueda = escritorios.ini;
    while(verificarEscritorioDisp() && desabordaje.ini !=null){
        if(desabordaje.ini!=null){
        try{
            Nodo desabordado = desabordaje.descolar();
            Pasajero personaDes = (Pasajero) desabordado.data;
            boolean asignado = false;
            
            NodoCola verificador = apuntadorBusqueda;
            EscritorioRegistro verificadorE = (EscritorioRegistro) verificador.data;
            if(verificadorE.Estado==2){
            verificadorE.cantidadDocARegistrar = personaDes.cantidadDocumentos;
            verificadorE.pasajero = personaDes;
            verificadorE.clienteAtendido = personaDes.identificacion;
            verificadorE.turnosRestantes = personaDes.turnoRegistro;
            verificadorE.Estado = 1;
            verificador.data = (Object)verificadorE;
            acciones+="Escritorio "+verificadorE.identificador+" empezo a atender a Pasajero "+personaDes.identificacion+"\r\n";
            asignado = true;
            }
            while(!asignado&&verificador.siguiente!=null){
            verificador = verificador.siguiente;
            verificadorE = (EscritorioRegistro) verificador.data;
            if(verificadorE.Estado==2){
            verificadorE.cantidadDocARegistrar = personaDes.cantidadDocumentos;
            verificadorE.pasajero = personaDes;
            verificadorE.clienteAtendido = personaDes.identificacion;
            verificadorE.turnosRestantes = personaDes.turnoRegistro;
            verificadorE.Estado = 1;
            verificador.data = (Object)verificadorE;
            acciones+="Escritorio "+verificadorE.identificador+" empezo a atender a Pasajero "+personaDes.identificacion+"\r\n";
            asignado = true;
            }
            }
            if(!asignado){
            verificador = apuntadorBusqueda;
            verificadorE = (EscritorioRegistro) verificador.data;
            if(verificador.cola.obtenerNumeroElementos()<10){
            verificador.cola.encolar(personaDes);
            asignado = true;
            }
            while(!asignado){
            verificador = verificador.siguiente;
            verificadorE = (EscritorioRegistro) verificador.data;
            if(verificador.cola.obtenerNumeroElementos()<10){
            verificador.cola.encolar(personaDes);
            asignado = true;
            }
            }
            }
            
        }catch(Exception e){}
        
        }
        if(apuntadorBusqueda.siguiente!=null){
            apuntadorBusqueda=apuntadorBusqueda.siguiente;
        }else{
            apuntadorBusqueda = escritorios.ini;
        }
        
        
    }
    
    mostrarEstado(acciones);
    escribirArchivo();
    generarImagen();
    try{
                Thread.sleep(1000);
            }catch(InterruptedException ex){
                Logger.getLogger(Hilo.class.getName()).log(Level.SEVERE,null,ex);
            }
    repintarImagen();
    
    }//GEN-LAST:event_jButtonSiguienteActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed
    public void generarImagen(){
    try {
      
      String dotPath = jTextField4.getText()+"dot.exe";
      
      String fileInputPath = System.getProperty("user.dir")+"\\grafo1.txt";
      String fileOutputPath = System.getProperty("user.dir")+"\\grafo1.jpg";
      
      String tParam = "-Tjpg";
      String tOParam = "-o";
        
      String[] cmd = new String[5];
      cmd[0] = dotPath;
      cmd[1] = tParam;
      cmd[2] = fileInputPath;
      cmd[3] = tOParam;
      cmd[4] = fileOutputPath;
                  
      Runtime rt = Runtime.getRuntime();
      
      rt.exec( cmd );
      
    } catch (Exception ex) {
      ex.printStackTrace();
    } finally {
    }
    }
    
    public boolean verificarEscritorioDisp(){
        boolean resultado = false;
        NodoCola verificador = escritorios.ini;
        EscritorioRegistro verificadorE = (EscritorioRegistro) verificador.data;
        if(verificadorE.Estado==2||verificador.cola.obtenerNumeroElementos()<10){
        resultado = true;
        }
        while(verificador.siguiente!=null){
        verificador = verificador.siguiente;
        verificadorE = (EscritorioRegistro) verificador.data;
        if(verificadorE.Estado==2||verificador.cola.obtenerNumeroElementos()<10){
        resultado = true;
        }
        }
        return resultado; 
    
    }
    public void escribirArchivo(){
    try
    {
    //Crear un objeto File se encarga de crear o abrir acceso a un archivo que se especifica en su constructor
    File archivob=new File(System.getProperty("user.dir")+"\\grafo1.txt");
    archivob.delete();
    File archivo=new File(System.getProperty("user.dir")+"\\grafo1.txt");
    //Crear objeto FileWriter que sera el que nos ayude a escribir sobre archivo
    FileWriter escribir=new FileWriter(archivo,true);

    //Escribimos en el archivo con el metodo write 
    escribir.write("digraph G\r\n{\r\n");
    escribir.write(generarGraphvizAvion());
    escribir.write(generarGraphvizDesabordaje());
    escribir.write(generarGraphvizEscritorio());
    escribir.write(generarGraphvizEquipaje());
    escribir.write(generarGraphvizMantenimiento());
    escribir.write(generarGraphvizAvionVacio());
    
    escribir.write("}\r\n");

    //Cerramos la conexion
    escribir.close();
    }

    //Si existe un problema al escribir cae aqui
    catch(Exception e)
    {
    System.out.println("Error al escribir");
    }
    
    }
    
    public String generarGraphvizEquipaje(){
        String resultadoDef = "";
        String resultadoLineas = "";
        if(!equipaje.estaVacia()){
            Nodo nodoActualM = equipaje.actual;
            Equipaje maletaActual = (Equipaje) nodoActualM.data;
             
            resultadoDef += "Maleta"+maletaActual.identificador+"[shape=box];\r\n";
            
            
            Nodo nodoSM = equipaje.actual.siguiente;
            Equipaje maletaS = (Equipaje) nodoSM.data;
            resultadoLineas += "Maleta"+maletaActual.identificador+"->"+"Maleta"+maletaS.identificador+";\r\n";
            
            Nodo nodoSA = equipaje.actual.anterior;
            Equipaje maletaA = (Equipaje) nodoSA.data;
            resultadoLineas += "Maleta"+maletaActual.identificador+"->"+"Maleta"+maletaA.identificador+";\r\n";
            
            int contadorRecorrer=1;
            while(contadorRecorrer<equipaje.contadorElementos){
                
                 nodoActualM = nodoActualM.siguiente;
             maletaActual = (Equipaje) nodoActualM.data;
            
            resultadoDef += "Maleta"+maletaActual.identificador+"[shape=box];\r\n";
            
            
             nodoSM = nodoActualM.siguiente;
             maletaS = (Equipaje) nodoSM.data;
            resultadoLineas += "Maleta"+maletaActual.identificador+"->"+"Maleta"+maletaS.identificador+";\r\n";
            
             nodoSA = nodoActualM.anterior;
             maletaA = (Equipaje) nodoSA.data;
            resultadoLineas += "Maleta"+maletaActual.identificador+"->"+"Maleta"+maletaA.identificador+";\r\n";
            contadorRecorrer++;
            }
        }
        
        return resultadoDef+resultadoLineas;
    }
    public String generarGraphvizAvion(){
        String resultadoDef = "";
        String resultadoLineas = "";
        if(!aviones.estaVacia()){
            Nodo avionNodo =aviones.ini;
            Avion avion= (Avion)avionNodo.data;
            resultadoDef += "avion"+avion.id+";\r\n";
            
            if(avionNodo.siguiente!=null){
                Nodo avionNodoS =aviones.ini.siguiente;
                Avion avionS= (Avion)avionNodoS.data;
                resultadoLineas += "avion"+avion.id+"->"+"avion"+avionS.id+";\r\n";
            }
            if(avionNodo.anterior!=null){
                Nodo avionNodoA =aviones.ini.anterior;
                Avion avionA= (Avion)avionNodoA.data;
                resultadoLineas += "avion"+avion.id+"->"+"avion"+avionA.id+";\r\n";
            }
            while(avionNodo.siguiente!=null){
                avionNodo =avionNodo.siguiente;
                avion= (Avion)avionNodo.data;
                resultadoDef += "avion"+avion.id+";\r\n";

                if(avionNodo.siguiente!=null){
                    Nodo avionNodoS =avionNodo.siguiente;
                    Avion avionS= (Avion)avionNodoS.data;
                    resultadoLineas += "avion"+avion.id+"->"+"avion"+avionS.id+";\r\n";
                }
                if(avionNodo.anterior!=null){
                    Nodo avionNodoA =avionNodo.anterior;
                    Avion avionA= (Avion)avionNodoA.data;
                    resultadoLineas += "avion"+avion.id+"->"+"avion"+avionA.id+";\r\n";
                }
            }
            
        }
        
        return resultadoDef+resultadoLineas;
    }
     public String generarGraphvizAvionVacio(){
        String resultadoDef = "";
        String resultadoLineas = "";
        if(!colaMantenimiento.estaVacia()){
            Nodo avionNodo =colaMantenimiento.ini;
            Avion avion= (Avion)avionNodo.data;
            resultadoDef += "avionVacio"+avion.id+";\r\n";
            
            if(avionNodo.siguiente!=null){
                Nodo avionNodoS =colaMantenimiento.ini.siguiente;
                Avion avionS= (Avion)avionNodoS.data;
                resultadoLineas += "avionVacio"+avion.id+"->"+"avionVacio"+avionS.id+";\r\n";
            }
            if(avionNodo.anterior!=null){
                Nodo avionNodoA =colaMantenimiento.ini.anterior;
                Avion avionA= (Avion)avionNodoA.data;
                resultadoLineas += "avionVacio"+avion.id+"->"+"avionVacio"+avionA.id+";\r\n";
            }
            while(avionNodo.siguiente!=null){
                avionNodo =avionNodo.siguiente;
                avion= (Avion)avionNodo.data;
                resultadoDef += "avionVacio"+avion.id+";\r\n";

                if(avionNodo.siguiente!=null){
                    Nodo avionNodoS =avionNodo.siguiente;
                    Avion avionS= (Avion)avionNodoS.data;
                    resultadoLineas += "avionVacio"+avion.id+"->"+"avionVacio"+avionS.id+";\r\n";
                }
                if(avionNodo.anterior!=null){
                    Nodo avionNodoA =avionNodo.anterior;
                    Avion avionA= (Avion)avionNodoA.data;
                    resultadoLineas += "avionVacio"+avion.id+"->"+"avionVacio"+avionA.id+";\r\n";
                }
            }
            
        }
        
        return resultadoDef+resultadoLineas;
    }
    public String generarGraphvizMantenimiento(){
        String resultadoDef = "";
        String resultadoLineas = "";
        if(!mantenimiento.estaVacia()){
            Nodo mantNodo =mantenimiento.ini;
            Mantenimiento mantenimientoO= (Mantenimiento)mantNodo.data;
            resultadoDef += "Estacion"+mantenimientoO.identificador+"[shape=box];\r\n";
            
            if(mantNodo.siguiente!=null){
                Nodo mantNodoS =mantenimiento.ini.siguiente;
                Mantenimiento mantS= (Mantenimiento)mantNodoS.data;
                resultadoLineas += "Estacion"+mantenimientoO.identificador+"->"+"Estacion"+mantS.identificador+";\r\n";
            }
            
            while(mantNodo.siguiente!=null){
                mantNodo =mantNodo.siguiente;
                mantenimientoO= (Mantenimiento)mantNodo.data;
            resultadoDef += "Estacion"+mantenimientoO.identificador+"[shape=box];\r\n";
            
            if(mantNodo.siguiente!=null){
                Nodo mantNodoS =mantNodo.siguiente;
                Mantenimiento mantS= (Mantenimiento)mantNodoS.data;
                resultadoLineas += "Estacion"+mantenimientoO.identificador+"->"+"Estacion"+mantS.identificador+";\r\n";
            }
            }
            
        }
        
        return resultadoDef+resultadoLineas;
    }
    
    public String generarGraphvizEscritorio(){
        String resultadoDef = "";
        String resultadoLineas = "";
        if(!escritorios.estaVacia()){
            NodoCola nodoEsc =escritorios.ini;
            EscritorioRegistro escritorioO= (EscritorioRegistro)nodoEsc.data;
            resultadoDef += "Escritorio"+escritorioO.identificador+"[shape=box];\r\n";
            
            
            if(!nodoEsc.cola.estaVacia()){
                Nodo pasNodo =nodoEsc.cola.ini;
                Pasajero pasaO= (Pasajero)pasNodo.data;
                resultadoDef += "Pasajero"+pasaO.identificacion+";\r\n";
                resultadoLineas += "Escritorio"+escritorioO.identificador+"->"+"Pasajero"+pasaO.identificacion+";\r\n";
                if(pasNodo.siguiente!=null){
                    Nodo pasNodoS =nodoEsc.cola.ini.siguiente;
                    Pasajero pasS= (Pasajero)pasNodoS.data;
                    resultadoLineas += "Pasajero"+pasaO.identificacion+"->"+"Pasajero"+pasS.identificacion+";\r\n";
                }

                while(pasNodo.siguiente!=null){
                    pasNodo =pasNodo.siguiente;
                    pasaO= (Pasajero)pasNodo.data;
                resultadoDef += "Pasajero"+pasaO.identificacion+";\r\n";

                if(pasNodo.siguiente!=null){
                    Nodo pasNodoS =pasNodo.siguiente;
                    Pasajero pasS= (Pasajero)pasNodoS.data;
                    resultadoLineas += "Pasajero"+pasaO.identificacion+"->"+"Pasajero"+pasS.identificacion+";\r\n";
                }
                }

            }
            
            if(nodoEsc.siguiente!=null){
                NodoCola escNodoS =escritorios.ini.siguiente;
                EscritorioRegistro escS= (EscritorioRegistro)escNodoS.data;
                resultadoLineas += "Escritorio"+escritorioO.identificador+"->"+"Escritorio"+escS.identificador+";\r\n";
            }
            
            if(nodoEsc.anterior!=null){
                NodoCola escNodoS =escritorios.ini.anterior;
                EscritorioRegistro escS= (EscritorioRegistro)escNodoS.data;
                resultadoLineas += "Escritorio"+escritorioO.identificador+"->"+"Escritorio"+escS.identificador+";\r\n";
            }
            
            while(nodoEsc.siguiente!=null){
                nodoEsc =nodoEsc.siguiente;
             escritorioO= (EscritorioRegistro)nodoEsc.data;
            resultadoDef += "Escritorio"+escritorioO.identificador+"[shape=box];\r\n";
            if(!nodoEsc.cola.estaVacia()){
                Nodo pasNodo =nodoEsc.cola.ini;
                Pasajero pasaO= (Pasajero)pasNodo.data;
                resultadoDef += "Pasajero"+pasaO.identificacion+";\r\n";
                resultadoLineas += "Escritorio"+escritorioO.identificador+"->"+"Pasajero"+pasaO.identificacion+";\r\n";
                if(pasNodo.siguiente!=null){
                    Nodo pasNodoS =nodoEsc.cola.ini.siguiente;
                    Pasajero pasS= (Pasajero)pasNodoS.data;
                    resultadoLineas += "Pasajero"+pasaO.identificacion+"->"+"Pasajero"+pasS.identificacion+";\r\n";
                }

                while(pasNodo.siguiente!=null){
                    pasNodo =pasNodo.siguiente;
                    pasaO= (Pasajero)pasNodo.data;
                resultadoDef += "Pasajero"+pasaO.identificacion+";\r\n";

                if(pasNodo.siguiente!=null){
                    Nodo pasNodoS =pasNodo.siguiente;
                    Pasajero pasS= (Pasajero)pasNodoS.data;
                    resultadoLineas += "Pasajero"+pasaO.identificacion+"->"+"Pasajero"+pasS.identificacion+";\r\n";
                }
                }

            }
            
            if(nodoEsc.siguiente!=null){
                NodoCola escNodoS =nodoEsc.siguiente;
                EscritorioRegistro escS= (EscritorioRegistro)escNodoS.data;
                resultadoLineas += "Escritorio"+escritorioO.identificador+"->"+"Escritorio"+escS.identificador+";\r\n";
            }
            
            if(nodoEsc.anterior!=null){
                NodoCola escNodoS =nodoEsc.anterior;
                EscritorioRegistro escS= (EscritorioRegistro)escNodoS.data;
                resultadoLineas += "Escritorio"+escritorioO.identificador+"->"+"Escritorio"+escS.identificador+";\r\n";
            } 
            }
            
        }
        
        return resultadoDef+resultadoLineas;
    }
    
    public String generarGraphvizDesabordaje(){
        String resultadoDef = "";
        String resultadoLineas = "";
        if(!desabordaje.estaVacia()){
            Nodo pasNodo =desabordaje.ini;
            Pasajero pasaO= (Pasajero)pasNodo.data;
            resultadoDef += "Pasajero"+pasaO.identificacion+";\r\n";
            
            if(pasNodo.siguiente!=null){
                Nodo pasNodoS =desabordaje.ini.siguiente;
                Pasajero pasS= (Pasajero)pasNodoS.data;
                resultadoLineas += "Pasajero"+pasaO.identificacion+"->"+"Pasajero"+pasS.identificacion+";\r\n";
            }
            
            while(pasNodo.siguiente!=null){
                pasNodo =pasNodo.siguiente;
                pasaO= (Pasajero)pasNodo.data;
            resultadoDef += "Pasajero"+pasaO.identificacion+";\r\n";
            
            if(pasNodo.siguiente!=null){
                Nodo pasNodoS =pasNodo.siguiente;
                Pasajero pasS= (Pasajero)pasNodoS.data;
                resultadoLineas += "Pasajero"+pasaO.identificacion+"->"+"Pasajero"+pasS.identificacion+";\r\n";
            }
            }
            
        }
        
        return resultadoDef+resultadoLineas;
    }
    
    public void repintarImagen(){
        jPanel1.removeAll();
        TableroFondo imagen = new TableroFondo();
        imagen.setFondo(System.getProperty("user.dir")+"\\grafo1.jpg");
        jPanel1.setLayout(null);
        imagen.setBounds(0, 0, 976, 785);
        jPanel1.add(imagen);
        jPanel1.repaint();
        jPanel1.setVisible(true);
    
    }
    
    
    public void mostrarEstado(String acciones){
    String texto="***********ACCIONES*********\n\r";
    texto+= acciones;
    texto+="***********COLA AVIONES*********\n\r";
    if(this.aviones.ini!=null){
    Nodo nodoAvionActual = this.aviones.ini;
    Avion avionActual = (Avion)nodoAvionActual.data;
    texto = texto+"Id: "+ avionActual.id+"-Tipo: "+avionActual.tipo+"Turno Desabordaje "+avionActual.turnosDesabordaje+"Turno Mantenimiento "+avionActual.turnosMantenimiento+"Pasajeros "+avionActual.pasajeros+"\n\r";
    while(nodoAvionActual.siguiente!=null){
    nodoAvionActual = nodoAvionActual.siguiente;
    avionActual = (Avion)nodoAvionActual.data;
    texto = texto+"Id: "+ avionActual.id+"-Tipo: "+avionActual.tipo+"Turno Desabordaje "+avionActual.turnosDesabordaje+"Turno Mantenimiento "+avionActual.turnosMantenimiento+"Pasajeros "+avionActual.pasajeros+"\n\r";
    }
    }
    texto+="***********COLA DESABORDAJE*********\n\r";
    texto+="Persona en cola "+desabordaje.obtenerNumeroElementos()+"\n\r";
     texto+="***********ESCRITORIOS DE REGISTRO*********\n\r";
    if(this.escritorios.ini!=null){
    NodoCola nodoEsc = this.escritorios.ini;
    EscritorioRegistro escA = (EscritorioRegistro)nodoEsc.data;
    if(escA.pasajero!=null){
    texto = texto+"Id: "+ escA.identificador+"-Estado: Ocupado Turnos Restantes "+escA.turnosRestantes+" Pasajero Atendiendo "+escA.pasajero.identificacion+" Cola Espera "+nodoEsc.cola.obtenerNumeroElementos()+" Pila Documentos "+nodoEsc.documentos.obtenerNumeroElementos()+"\n\r";
    }else{
        texto = texto+"Id: "+ escA.identificador+"-Estado: Libre Turnos Restantes "+escA.turnosRestantes+" Pasajero Atendiendo Ninguno Cola Espera "+nodoEsc.cola.obtenerNumeroElementos()+" Pila Documentos "+nodoEsc.documentos.obtenerNumeroElementos()+"\n\r";
    }
    while(nodoEsc.siguiente!=null){
    nodoEsc = nodoEsc.siguiente;
    escA = (EscritorioRegistro)nodoEsc.data;
    if(escA.pasajero!=null){
    texto = texto+"Id: "+ escA.identificador+"-Estado: Ocupado Turnos Restantes "+escA.turnosRestantes+" Pasajero Atendiendo "+escA.pasajero.identificacion+" Cola Espera "+nodoEsc.cola.obtenerNumeroElementos()+" Pila Documentos "+nodoEsc.documentos.obtenerNumeroElementos()+"\n\r";
    }else{
        texto = texto+"Id: "+ escA.identificador+"-Estado: Libre Turnos Restantes "+escA.turnosRestantes+" Pasajero Atendiendo Ninguno Cola Espera "+nodoEsc.cola.obtenerNumeroElementos()+" Pila Documentos "+nodoEsc.documentos.obtenerNumeroElementos()+"\n\r";
    }
    }
    }
    
    texto+="***********LISTA MALETAS*********\n\r";
    texto+="Maletas en lista "+equipaje.contadorElementos+"\n\r";
    
    texto+="***********COLA MANTENIMIENTO AVIONES*********\n\r";
    texto+="Aviones en cola "+colaMantenimiento.obtenerNumeroElementos()+"\n\r";
    texto+="***********ESTACIONES MANTENIMIENTO*********\n\r";
    if(this.mantenimiento.ini!=null){
    Nodo nodoME = this.mantenimiento.ini;
    Mantenimiento estacionE = (Mantenimiento)nodoME.data;
    texto = texto+"Id: "+ estacionE.identificador+" Turnos Restantes "+estacionE.turnosRestantes+" Estado: "+estacionE.Estado+" Avion Atendido "+estacionE.avionId+"\n\r";
    while(nodoME.siguiente!=null){
    nodoME = nodoME.siguiente;
    estacionE = (Mantenimiento)nodoME.data;
    texto = texto+"Id: "+ estacionE.identificador+" Turnos Restantes "+estacionE.turnosRestantes+" Estado: "+estacionE.Estado+" Avion Atendido "+estacionE.avionId+"\n\r";
    }
    }
    texto+="***********PERSONAS ATENDIDAS*********\n\r";
    texto+=""+this.pasajerosCreados+"\n\r";
    texto+="***********MALETAS*********\n\r";
    texto+=""+this.maletasDebug+"\n\r";
    
    jTextArea1.setText(texto);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonIniciar;
    private javax.swing.JButton jButtonSiguiente;
    private javax.swing.JButton jButtonTerminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
